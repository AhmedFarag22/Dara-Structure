#include<iostream>
#include<cassert>
using namespace std;
template<class t>
class linkedQueue {

private:

	struct node {
		t item;
		node* next;
	};

	node* frontPtr;
	node* rearPtr;
	int lenght;
public:
	linkedQueue() {
		{
			frontPtr = rearPtr = NULL;
			lenght = 0;
		}
	}
	bool isEmpty() {
		return lenght == 0;

	}

	void enqueue(t element) {
		if (isEmpty()) {
			frontPtr = new node;
			frontPtr->item = element;
			frontPtr->next = NULL;
			rearPtr = frontPtr;
			lenght++;
		}
		else {
			node* newPtr = new node;
			newPtr->item = element;
			newPtr->next = NULL;
			rearPtr->next = newPtr;
			rearPtr = newPtr;
			lenght++;
		}
	}


	void QueueDelete() {
		if (isEmpty())
			cout << "empty";
		else {
			node* tempPtr = frontPtr;
			if (frontPtr == rearPtr) {
				frontPtr = NULL;
				rearPtr = NULL;
				lenght = 0;
			}
			else
				frontPtr = frontPtr->next;
			tempPtr->next = NULL;
			delete tempPtr;
			lenght--;
		}
	}

	t getFrontt() {
		assert(!isEmpty());
		return frontPtr->item;
	}

	t getRear() {
		assert(!isEmpty());
		return rearPtr->item;
	}

	void getFront(int& el) {
		el = frontPtr->item;
	}

	void display() {
		node* curPtr = frontPtr;
		cout << "item in the QUEUE : [";
		while (curPtr != NULL) {
			cout << curPtr->item<<"  ";
			curPtr = curPtr->next;
		}
		cout << "]\n";
	}

	void clearQueue() {
		node* current;
		while (frontPtr != NULL) {
			current = frontPtr;
			frontPtr = frontPtr->next;
			delete current;
		}
	}

	
};


int main() {
	linkedQueue<int>q;
	q.enqueue(100);
	q.enqueue(200);
	q.enqueue(300);
	q.enqueue(400);
	cout << endl << "front =  " << q.getFrontt() << "    rear =  " << q.getRear();
	q.display();

}
