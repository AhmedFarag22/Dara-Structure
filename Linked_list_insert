#include<iostream>
using namespace std;
class linkedList {

	struct node
	{
		int item;
		node* next;
	};
	node* first;
	node* last;
	int length;
public:
	linkedList() {
		first = last = NULL;
		length = 0;
	}
	bool isEmpty() {
		return length == 0;
	}

	void insertFirst(int element) {
		node* newNode = new node;
		newNode->item = element;
		if (length == 0) {
			first = last = newNode;
			newNode->next = NULL;
		}
		else {
			newNode->next = first;
			first = newNode;
		}
		length++;

	}

	void insertLast(int element) {
		node* newNode = new node;
		newNode->item = element;
		if (length == 0) {
			first = last = newNode;
			newNode->next = NULL;
		}
		else {
			last->next = newNode;
		    newNode->next=NULL;
			last = newNode;
		}
		length++;

	}

	void insertAtPos(int pos, int element) {
		if (pos<0 || pos>length)
			cout << "out of range";
		else {
			node* newNode = new node;
			newNode->item = element;
			if (pos == 0)
				insertFirst(element);
			else if (pos == length)
				insertLast(element);
			else {
				node* cur = first;
				for (size_t i = 1; i <pos; i++)
				{
					cur = cur->next;

				}

				newNode->next = cur->next;
				cur->next = newNode;
				length++;


			}

		}

	}

	void removeFirst() {
		if (length == 0)
			cout << "empty";
		else if (length == 1) {
			delete first;
			last = first = NULL;
		}
		else
		{
			node* curr = first;
			first = first->next;
			delete curr;
		}
	}

	void removeLast() {
		node* curr = first->next;
		node* prev = first;
		while (curr != last) {
			prev = curr;
			curr = curr->next;
			
		}
		delete curr;
		length--;
	}

	void remove(int element) {
		if (isEmpty())
		{
			cout << "empty list";
			return;
		}

		node* curr, * prev;
		if (first->item == element) {
			curr = first;
			first = first->next;
			delete curr;
			length--;
			if (length == 0)
				last == NULL;
		}
		else
		{
			curr = first->next;
			prev = first;
			while (curr != NULL) {
				if (curr->item == element)
					break;
				prev = curr;
				curr = curr->next;
			}
			if (curr == NULL)
				cout << "the element not foun";
			else
			{
				prev->next = curr->next;
				if (last == curr)
					last = prev;
				delete curr;
				length--;
			}
		}

	}

	void reverse() {
		node* prev, * next, * curr;
		prev = NULL;
		curr = first;
		next = curr->next;
		while (next != NULL)
		{
			next = curr->next;
			curr->next = prev;
			prev = curr;
			curr = next;


		}
		first = prev;

	}

	int search(int element) {

		node* curr = first;
		int pos = 0;
		while (curr!= NULL)
		{
			if (curr->item == element)
				return pos;
			curr = curr->next;
			pos++;

		}
		return -1;

	}

	void print() {
		node* cur = first;
		while (cur != NULL) {
			cout << cur->item << "  ";
			cur = cur->next;
		}
	}

	


};



int main() {
	linkedList q;
	q.insertFirst(10);
	q.insertFirst(20);
	q.insertFirst(30);
	q.insertLast(40);
	q.insertAtPos(1, 20);
	q.reverse();
	q.print();
	cout << q.search(10);

}

//search O(n)
//insert O(n)
//delete O(n)
