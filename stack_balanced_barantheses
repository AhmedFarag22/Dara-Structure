#include<iostream>
#include<string>
#include<stack>

using namespace std;

bool arepair(char open, char close) {
	if (open == '(' && close == ')')
		return true;
	else if (open == '{' && close == '}')
		return true;
	else if (open == '[' && close == ']')
		return true;
	else
		return false;
}
bool arebalanced(string exp) {
	stack<char>s;
	for (size_t i = 0; i < exp.length(); i++)
	{

		if (exp[i] == '(' || exp[i] == '{' || exp[i] == '[')
			s.push(exp[i]);
		else if (exp[i] == ')' || exp[i] == '}' || exp[i] == ']') {
			if (s.empty() || !arepair(s.top(), exp[i]))
				return false;
			else
				s.pop();
		}


	}
	return s.empty() ? true : false;

}


int main() {

	string expression;
	cout << "enter an expression   ";
	cin >> expression;
	if (arebalanced(expression))
		cout << "Balanced\n";
	else
		cout << "not balanced\n";

}
